{"version":3,"sources":["logo.svg","Word.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Word","word","className","class","App","useState","words","setWords","wordSize","setWordSize","formLetters","letters","setLetters","loading","setLoading","searchFor","searchValue","a","console","log","fetch","then","response","json","data","count","elements","i","push","id","type","maxLength","placeholder","onClick","href","searchText","inputValue","document","getElementById","value","getTextSearch","map","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,8JCW5BC,MARf,YAAsB,IAAPC,EAAM,EAANA,KACX,OACI,yBAAKC,UAAU,wBACX,uBAAGA,UAAU,mBAAmBD,KCD7B,G,MAAA,WACX,OACI,yBAAKC,UAAU,oBACX,yBAAKC,MAAM,YACP,8BAAM,8BAAM,8BAAM,kCCoGnBC,MAvGf,WAEE,IAFa,EAIaC,mBAAS,IAJtB,mBAINC,EAJM,KAICC,EAJD,OAKmBF,mBAHZ,GAFP,mBAKNG,EALM,KAKIC,EALJ,OAMiBJ,mBAAS,CAACK,EAAYF,KANvC,mBAMNG,EANM,KAMGC,EANH,OAOiBP,oBAAS,GAP1B,mBAONQ,EAPM,KAOGC,EAPH,KASPC,EAAS,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DAChBH,GAAW,GACXI,QAAQC,IAAIH,GAFI,SAGVI,MAAM,SAAD,OAAUJ,IACpBK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJV,GAAW,GACXP,EAASiB,EAAKlB,UAPA,2CAAH,sDA0Bf,SAASI,EAAYe,GAEnB,IADA,IAAIC,EAAW,GACPC,EAAI,EAAGA,EAAIF,EAAOE,IACxBD,EAASE,KACP,2BAAO1B,UAAU,eAAe2B,GAAE,gBAAWF,GAAKG,KAAK,OAAOC,UAAU,IAAIC,YAAY,OAI5F,OACEN,EAqBJ,OACE,6BACE,4BAAQxB,UAAU,eAAe2B,GAAG,UAClC,uBAAG3B,UAAU,gBAAb,4DAEF,6BAASA,UAAU,kBACjB,yBAAKA,UAAU,uBACb,4BAAQA,UAAU,kBAAkB+B,QAAS,WAf/CzB,EAAW,IACbC,EAAYD,EAAS,GACrBI,EAAWF,EAAYF,EAAS,IAChCU,QAAQC,IAAIX,EAAS,MAYuD,yBAAKN,UAAU,gBACvF,uBAAGA,UAAU,aAAaM,GAC1B,4BAAQN,UAAU,kBAAkB+B,QAAS,WAzB/CzB,EAAW,KACbC,EAAYD,EAAS,GACrBI,EAAWF,EAAYF,EAAS,IAChCU,QAAQC,IAAIX,EAAS,MAsBoD,yBAAKN,UAAU,kBAGtF,yBAAKA,UAAU,qBACZS,GAGH,yBAAKT,UAAU,2BACb,uBAAGgC,KAAK,YACR,4BAAQhC,UAAU,gBAAgB+B,QAAS,kBAAMlB,EA9DzD,WAEE,IADA,IAAIoB,EAAa,GACTR,EAAI,EAAGA,EAAInB,EAAUmB,IAAI,CAC/B,IAAIS,EAAaC,SAASC,eAAT,gBAAiCX,IAAKY,MAErDJ,GADgB,MAAfC,GAAqC,MAAfA,GAAqC,KAAfA,EAC/B,IAEAA,EAIlB,OADAlB,QAAQC,IAAIgB,GACLA,EAmD0DK,MAA3D,qCAMJ,6BAAStC,UAAU,iBAAiB2B,GAAG,WACnChB,GAAW,kBAAC,EAAD,MACb,yBAAKX,UAAU,mBACZI,EAAMmC,KAAI,SAACxC,EAAMyC,GAAP,OACT,kBAAC,EAAD,CAAMzC,KAAMA,EAAKA,KAAM4B,GAAE,cAASa,QAFtC,QCrFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASC,eAAe,SDyHpB,kBAAmBa,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.2066803d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n \r\nfunction Word({word}){\r\n    return(\r\n        <div className=\"word-container-style\">\r\n            <p className=\"word-text-style\">{word}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Word;","import React from 'react';\r\nimport './Loader.css';\r\n\r\n\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"loader-container\">\r\n            <div class=\"lds-ring\">\r\n                <div/><div/><div/><div/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Word from './Word.js';\nimport Loader from './Loader';\n\nfunction App() {\n\n  const minWordSize = 3;\n  const maxWordSize = 14;\n  const [words, setWords] = useState([]);\n  const [wordSize, setWordSize] = useState(minWordSize);\n  const [letters, setLetters] = useState([formLetters(wordSize)]);\n  const [loading, setLoading] = useState(false);\n\n  const searchFor = async (searchValue) => {\n    setLoading(true);\n    console.log(searchValue);\n    await fetch(`/find/${searchValue}`)\n    .then(response => response.json())\n    .then(data => {\n      setLoading(false);\n      setWords(data.words);\n    }); \n\n  }\n\n  function getTextSearch(){\n    let searchText = \"\";\n    for(let i = 0; i < wordSize; i++){\n      let inputValue = document.getElementById(`letter${i}`).value;\n      if(inputValue === \" \" || inputValue === \"?\" || inputValue === \"\"){\n        searchText += \"_\";\n      } else{\n        searchText += inputValue;\n      }\n    }  \n    console.log(searchText);\n    return searchText;\n  }\n\n  function formLetters(count){\n    let elements = []\n    for(let i = 0; i < count; i++){\n      elements.push(\n        <input className=\"letter-style\" id={`letter${i}`} type=\"text\" maxLength=\"1\" placeholder=\"?\"/>\n      );\n    }\n\n    return(\n      elements\n    );\n  }\n\n  function addLetter(){\n    if (wordSize < 14) {\n      setWordSize(wordSize+1);\n      setLetters(formLetters(wordSize+1));\n      console.log(wordSize+1);\n    }\n  }\n\n  function removeLetter(){\n    if (wordSize > 3) {\n      setWordSize(wordSize-1);\n      setLetters(formLetters(wordSize-1));\n      console.log(wordSize-1);\n    }\n  }\n\n\n  return (\n    <div>\n      <header className=\"header-style\" id=\"header\">\n        <p className=\"header-title\">Поле Чудес</p>\n      </header>\n      <section className=\"search-section\">\n        <div className=\"word-size-container\">\n          <button className=\"arrow-container\" onClick={() => { removeLetter() } }><div className=\"left-arrow\"></div></button>\n          <p className=\"word-size\">{wordSize}</p>\n          <button className=\"arrow-container\" onClick={() => { addLetter() } }><div className=\"right-arrow\"></div></button>\n        </div>\n\n        <div className=\"letters-container\">\n          {letters}\n        </div>\n\n        <div className=\"search-button-container\">\n          <a href=\"#results\">\n          <button className=\"search-button\" onClick={() => searchFor(getTextSearch())}>Поиск</button>\n          </a>\n        </div>\n\n      </section>\n\n      <section className=\"result-section\" id=\"results\">\n        { loading && <Loader /> }\n        <div className=\"words-container\">\n          {words.map((word, index) => (\n            <Word word={word.word} id={`word${index}`} />\n          ))};  \n        </div>\n\n    \n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}